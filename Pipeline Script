pipeline {
    agent any

    environment {
        docker_image1 = 'frontend'
        docker_image2 = 'backend'
        docker_repo = 'aditisingh0409/spe_final_project'
        github_repo_url = 'https://github.com/aditisingh0409/SPE-Final-Project/'
    }

    stages {
        stage('Stage 1: Clone repository') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: "${github_repo_url}"]]])
            }
        }
        
        stage('Stage 2: Build Docker Image') {
            steps {
                script {
                    // Building Docker images for frontend and backend
                    docker_image1 = docker.build("${docker_repo}:frontend", 'frontend/.')
                    docker_image2 = docker.build("${docker_repo}:backend", 'backend/.')
                }
            }
        }

        stage('Stage 3: Push docker image to hub') {
            steps {
                script {
                    docker.withRegistry('', 'DockerCred') {
                        // Pushing Docker images to Docker Hub
                        docker_image1.push('latest')
                        docker_image2.push('latest')
                    }
                }
            }
        }

        stage('Stage 4: Clean docker images') {
            steps {
                script {
                    //sh 'docker stop calculator'
                    //sh 'docker rm calculator'
                    sh 'docker container prune -f'
                    sh 'docker image prune -f'
                }
            }
        }

        stage('Stage 5: Deploy with Ansible') {
            steps {
                ansiblePlaybook(
                    becomeUser: null,
                    colorized: true,
                    credentialsId: 'localhost',
                    disableHostKeyChecking: true,
                    installation: 'Ansible',
                    inventory: 'Deployment/inventory',
                    playbook: 'Deployment/deploy.yml',
                    sudoUser: null
                )
            }
        }
    }
}